# Autogenerated by nbdev

d = { 'settings': { 'branch': 'main',
                'doc_baseurl': '/statsforecast/',
                'doc_host': 'https://Nixtla.github.io',
                'git_url': 'https://github.com/Nixtla/statsforecast/tree/main/',
                'lib_path': 'statsforecast'},
  'syms': { 'statsforecast.adapters.prophet': { 'statsforecast.adapters.prophet.AutoARIMAProphet': ( 'adapters.prophet.html#autoarimaprophet',
                                                                                                     'statsforecast/adapters/prophet.py'),
                                                'statsforecast.adapters.prophet.AutoARIMAProphet.__init__': ( 'adapters.prophet.html#autoarimaprophet.__init__',
                                                                                                              'statsforecast/adapters/prophet.py'),
                                                'statsforecast.adapters.prophet.AutoARIMAProphet.fit': ( 'adapters.prophet.html#autoarimaprophet.fit',
                                                                                                         'statsforecast/adapters/prophet.py'),
                                                'statsforecast.adapters.prophet.AutoARIMAProphet.predict': ( 'adapters.prophet.html#autoarimaprophet.predict',
                                                                                                             'statsforecast/adapters/prophet.py')},
            'statsforecast.arima': { 'statsforecast.arima.ARIMASummary': ('arima.html#arimasummary', 'statsforecast/arima.py'),
                                     'statsforecast.arima.ARIMASummary.__init__': ( 'arima.html#arimasummary.__init__',
                                                                                    'statsforecast/arima.py'),
                                     'statsforecast.arima.ARIMASummary.__repr__': ( 'arima.html#arimasummary.__repr__',
                                                                                    'statsforecast/arima.py'),
                                     'statsforecast.arima.ARIMASummary.summary': ( 'arima.html#arimasummary.summary',
                                                                                   'statsforecast/arima.py'),
                                     'statsforecast.arima.ARIMA_invtrans': ('arima.html#arima_invtrans', 'statsforecast/arima.py'),
                                     'statsforecast.arima.Arima': ('arima.html#arima', 'statsforecast/arima.py'),
                                     'statsforecast.arima.AutoARIMA': ('arima.html#autoarima', 'statsforecast/arima.py'),
                                     'statsforecast.arima.AutoARIMA.__init__': ('arima.html#autoarima.__init__', 'statsforecast/arima.py'),
                                     'statsforecast.arima.AutoARIMA.fit': ('arima.html#autoarima.fit', 'statsforecast/arima.py'),
                                     'statsforecast.arima.AutoARIMA.predict': ('arima.html#autoarima.predict', 'statsforecast/arima.py'),
                                     'statsforecast.arima.AutoARIMA.predict_in_sample': ( 'arima.html#autoarima.predict_in_sample',
                                                                                          'statsforecast/arima.py'),
                                     'statsforecast.arima.AutoARIMA.summary': ('arima.html#autoarima.summary', 'statsforecast/arima.py'),
                                     'statsforecast.arima._make_arima': ('arima.html#_make_arima', 'statsforecast/arima.py'),
                                     'statsforecast.arima.arima': ('arima.html#arima', 'statsforecast/arima.py'),
                                     'statsforecast.arima.arima_css': ('arima.html#arima_css', 'statsforecast/arima.py'),
                                     'statsforecast.arima.arima_gradtrans': ('arima.html#arima_gradtrans', 'statsforecast/arima.py'),
                                     'statsforecast.arima.arima_like': ('arima.html#arima_like', 'statsforecast/arima.py'),
                                     'statsforecast.arima.arima_string': ('arima.html#arima_string', 'statsforecast/arima.py'),
                                     'statsforecast.arima.arima_transpar': ('arima.html#arima_transpar', 'statsforecast/arima.py'),
                                     'statsforecast.arima.arima_undopars': ('arima.html#arima_undopars', 'statsforecast/arima.py'),
                                     'statsforecast.arima.auto_arima_f': ('arima.html#auto_arima_f', 'statsforecast/arima.py'),
                                     'statsforecast.arima.change_drift_name': ('arima.html#change_drift_name', 'statsforecast/arima.py'),
                                     'statsforecast.arima.checkarima': ('arima.html#checkarima', 'statsforecast/arima.py'),
                                     'statsforecast.arima.convert_coef_name': ('arima.html#convert_coef_name', 'statsforecast/arima.py'),
                                     'statsforecast.arima.diff': ('arima.html#diff', 'statsforecast/arima.py'),
                                     'statsforecast.arima.diff1d': ('arima.html#diff1d', 'statsforecast/arima.py'),
                                     'statsforecast.arima.diff2d': ('arima.html#diff2d', 'statsforecast/arima.py'),
                                     'statsforecast.arima.fitted_arima': ('arima.html#fitted_arima', 'statsforecast/arima.py'),
                                     'statsforecast.arima.forecast_arima': ('arima.html#forecast_arima', 'statsforecast/arima.py'),
                                     'statsforecast.arima.getQ0': ('arima.html#getq0', 'statsforecast/arima.py'),
                                     'statsforecast.arima.inclu2': ('arima.html#inclu2', 'statsforecast/arima.py'),
                                     'statsforecast.arima.invpartrans': ('arima.html#invpartrans', 'statsforecast/arima.py'),
                                     'statsforecast.arima.is_constant': ('arima.html#is_constant', 'statsforecast/arima.py'),
                                     'statsforecast.arima.kalman_forecast': ('arima.html#kalman_forecast', 'statsforecast/arima.py'),
                                     'statsforecast.arima.make_arima': ('arima.html#make_arima', 'statsforecast/arima.py'),
                                     'statsforecast.arima.mstl': ('arima.html#mstl', 'statsforecast/arima.py'),
                                     'statsforecast.arima.myarima': ('arima.html#myarima', 'statsforecast/arima.py'),
                                     'statsforecast.arima.ndiffs': ('arima.html#ndiffs', 'statsforecast/arima.py'),
                                     'statsforecast.arima.newmodel': ('arima.html#newmodel', 'statsforecast/arima.py'),
                                     'statsforecast.arima.nsdiffs': ('arima.html#nsdiffs', 'statsforecast/arima.py'),
                                     'statsforecast.arima.partrans': ('arima.html#partrans', 'statsforecast/arima.py'),
                                     'statsforecast.arima.predict_arima': ('arima.html#predict_arima', 'statsforecast/arima.py'),
                                     'statsforecast.arima.print_statsforecast_ARIMA': ( 'arima.html#print_statsforecast_arima',
                                                                                        'statsforecast/arima.py'),
                                     'statsforecast.arima.search_arima': ('arima.html#search_arima', 'statsforecast/arima.py'),
                                     'statsforecast.arima.seas_heuristic': ('arima.html#seas_heuristic', 'statsforecast/arima.py'),
                                     'statsforecast.arima.tsconv': ('arima.html#tsconv', 'statsforecast/arima.py')},
            'statsforecast.ces': { 'statsforecast.ces.auto_ces': ('ces.html#auto_ces', 'statsforecast/ces.py'),
                                   'statsforecast.ces.ces_target_fn': ('ces.html#ces_target_fn', 'statsforecast/ces.py'),
                                   'statsforecast.ces.cescalc': ('ces.html#cescalc', 'statsforecast/ces.py'),
                                   'statsforecast.ces.cesfcst': ('ces.html#cesfcst', 'statsforecast/ces.py'),
                                   'statsforecast.ces.cesforecast': ('ces.html#cesforecast', 'statsforecast/ces.py'),
                                   'statsforecast.ces.cesmodel': ('ces.html#cesmodel', 'statsforecast/ces.py'),
                                   'statsforecast.ces.cesupdate': ('ces.html#cesupdate', 'statsforecast/ces.py'),
                                   'statsforecast.ces.forecast_ces': ('ces.html#forecast_ces', 'statsforecast/ces.py'),
                                   'statsforecast.ces.initparamces': ('ces.html#initparamces', 'statsforecast/ces.py'),
                                   'statsforecast.ces.initstate': ('ces.html#initstate', 'statsforecast/ces.py'),
                                   'statsforecast.ces.optimize_ces_target_fn': ('ces.html#optimize_ces_target_fn', 'statsforecast/ces.py'),
                                   'statsforecast.ces.pegelsfcast_C': ('ces.html#pegelsfcast_c', 'statsforecast/ces.py'),
                                   'statsforecast.ces.pegelsresid_ces': ('ces.html#pegelsresid_ces', 'statsforecast/ces.py'),
                                   'statsforecast.ces.switch_ces': ('ces.html#switch_ces', 'statsforecast/ces.py')},
            'statsforecast.core': { 'statsforecast.core.GroupedArray': ('core.html#groupedarray', 'statsforecast/core.py'),
                                    'statsforecast.core.GroupedArray.__eq__': ('core.html#groupedarray.__eq__', 'statsforecast/core.py'),
                                    'statsforecast.core.GroupedArray.__getitem__': ( 'core.html#groupedarray.__getitem__',
                                                                                     'statsforecast/core.py'),
                                    'statsforecast.core.GroupedArray.__init__': ( 'core.html#groupedarray.__init__',
                                                                                  'statsforecast/core.py'),
                                    'statsforecast.core.GroupedArray.__len__': ('core.html#groupedarray.__len__', 'statsforecast/core.py'),
                                    'statsforecast.core.GroupedArray.__repr__': ( 'core.html#groupedarray.__repr__',
                                                                                  'statsforecast/core.py'),
                                    'statsforecast.core.GroupedArray._get_cols': ( 'core.html#groupedarray._get_cols',
                                                                                   'statsforecast/core.py'),
                                    'statsforecast.core.GroupedArray._output_fcst': ( 'core.html#groupedarray._output_fcst',
                                                                                      'statsforecast/core.py'),
                                    'statsforecast.core.GroupedArray.cross_validation': ( 'core.html#groupedarray.cross_validation',
                                                                                          'statsforecast/core.py'),
                                    'statsforecast.core.GroupedArray.fit': ('core.html#groupedarray.fit', 'statsforecast/core.py'),
                                    'statsforecast.core.GroupedArray.fit_predict': ( 'core.html#groupedarray.fit_predict',
                                                                                     'statsforecast/core.py'),
                                    'statsforecast.core.GroupedArray.forecast': ( 'core.html#groupedarray.forecast',
                                                                                  'statsforecast/core.py'),
                                    'statsforecast.core.GroupedArray.predict': ('core.html#groupedarray.predict', 'statsforecast/core.py'),
                                    'statsforecast.core.GroupedArray.split': ('core.html#groupedarray.split', 'statsforecast/core.py'),
                                    'statsforecast.core.GroupedArray.split_fm': ( 'core.html#groupedarray.split_fm',
                                                                                  'statsforecast/core.py'),
                                    'statsforecast.core.StatsForecast': ('core.html#statsforecast', 'statsforecast/core.py'),
                                    'statsforecast.core.StatsForecast.__init__': ( 'core.html#statsforecast.__init__',
                                                                                   'statsforecast/core.py'),
                                    'statsforecast.core.StatsForecast.__repr__': ( 'core.html#statsforecast.__repr__',
                                                                                   'statsforecast/core.py'),
                                    'statsforecast.core.StatsForecast._cross_validation_parallel': ( 'core.html#statsforecast._cross_validation_parallel',
                                                                                                     'statsforecast/core.py'),
                                    'statsforecast.core.StatsForecast._fit_parallel': ( 'core.html#statsforecast._fit_parallel',
                                                                                        'statsforecast/core.py'),
                                    'statsforecast.core.StatsForecast._fit_predict_parallel': ( 'core.html#statsforecast._fit_predict_parallel',
                                                                                                'statsforecast/core.py'),
                                    'statsforecast.core.StatsForecast._forecast_parallel': ( 'core.html#statsforecast._forecast_parallel',
                                                                                             'statsforecast/core.py'),
                                    'statsforecast.core.StatsForecast._get_gas_Xs': ( 'core.html#statsforecast._get_gas_xs',
                                                                                      'statsforecast/core.py'),
                                    'statsforecast.core.StatsForecast._get_pool': ( 'core.html#statsforecast._get_pool',
                                                                                    'statsforecast/core.py'),
                                    'statsforecast.core.StatsForecast._make_future_df': ( 'core.html#statsforecast._make_future_df',
                                                                                          'statsforecast/core.py'),
                                    'statsforecast.core.StatsForecast._parse_X_level': ( 'core.html#statsforecast._parse_x_level',
                                                                                         'statsforecast/core.py'),
                                    'statsforecast.core.StatsForecast._predict_parallel': ( 'core.html#statsforecast._predict_parallel',
                                                                                            'statsforecast/core.py'),
                                    'statsforecast.core.StatsForecast._prepare_fit': ( 'core.html#statsforecast._prepare_fit',
                                                                                       'statsforecast/core.py'),
                                    'statsforecast.core.StatsForecast.cross_validation': ( 'core.html#statsforecast.cross_validation',
                                                                                           'statsforecast/core.py'),
                                    'statsforecast.core.StatsForecast.cross_validation_fitted_values': ( 'core.html#statsforecast.cross_validation_fitted_values',
                                                                                                         'statsforecast/core.py'),
                                    'statsforecast.core.StatsForecast.fit': ('core.html#statsforecast.fit', 'statsforecast/core.py'),
                                    'statsforecast.core.StatsForecast.fit_predict': ( 'core.html#statsforecast.fit_predict',
                                                                                      'statsforecast/core.py'),
                                    'statsforecast.core.StatsForecast.forecast': ( 'core.html#statsforecast.forecast',
                                                                                   'statsforecast/core.py'),
                                    'statsforecast.core.StatsForecast.forecast_fitted_values': ( 'core.html#statsforecast.forecast_fitted_values',
                                                                                                 'statsforecast/core.py'),
                                    'statsforecast.core.StatsForecast.predict': ( 'core.html#statsforecast.predict',
                                                                                  'statsforecast/core.py'),
                                    'statsforecast.core._cv_dates': ('core.html#_cv_dates', 'statsforecast/core.py'),
                                    'statsforecast.core._get_n_jobs': ('core.html#_get_n_jobs', 'statsforecast/core.py'),
                                    'statsforecast.core._grouped_array_from_df': ( 'core.html#_grouped_array_from_df',
                                                                                   'statsforecast/core.py')},
            'statsforecast.distributed.core': { 'statsforecast.distributed.core.ParallelBackend': ( 'distributed.core.html#parallelbackend',
                                                                                                    'statsforecast/distributed/core.py'),
                                                'statsforecast.distributed.core.ParallelBackend.cross_validation': ( 'distributed.core.html#parallelbackend.cross_validation',
                                                                                                                     'statsforecast/distributed/core.py'),
                                                'statsforecast.distributed.core.ParallelBackend.forecast': ( 'distributed.core.html#parallelbackend.forecast',
                                                                                                             'statsforecast/distributed/core.py')},
            'statsforecast.distributed.fugue': { 'statsforecast.distributed.fugue.FugueBackend': ( 'distributed.fugue.html#fuguebackend',
                                                                                                   'statsforecast/distributed/fugue.py'),
                                                 'statsforecast.distributed.fugue.FugueBackend.__getstate__': ( 'distributed.fugue.html#fuguebackend.__getstate__',
                                                                                                                'statsforecast/distributed/fugue.py'),
                                                 'statsforecast.distributed.fugue.FugueBackend.__init__': ( 'distributed.fugue.html#fuguebackend.__init__',
                                                                                                            'statsforecast/distributed/fugue.py'),
                                                 'statsforecast.distributed.fugue.FugueBackend._cv': ( 'distributed.fugue.html#fuguebackend._cv',
                                                                                                       'statsforecast/distributed/fugue.py'),
                                                 'statsforecast.distributed.fugue.FugueBackend._forecast_series': ( 'distributed.fugue.html#fuguebackend._forecast_series',
                                                                                                                    'statsforecast/distributed/fugue.py'),
                                                 'statsforecast.distributed.fugue.FugueBackend._get_output_schema': ( 'distributed.fugue.html#fuguebackend._get_output_schema',
                                                                                                                      'statsforecast/distributed/fugue.py'),
                                                 'statsforecast.distributed.fugue.FugueBackend.cross_validation': ( 'distributed.fugue.html#fuguebackend.cross_validation',
                                                                                                                    'statsforecast/distributed/fugue.py'),
                                                 'statsforecast.distributed.fugue.FugueBackend.forecast': ( 'distributed.fugue.html#fuguebackend.forecast',
                                                                                                            'statsforecast/distributed/fugue.py')},
            'statsforecast.distributed.multiprocess': { 'statsforecast.distributed.multiprocess.MultiprocessBackend': ( 'distributed.multiprocess.html#multiprocessbackend',
                                                                                                                        'statsforecast/distributed/multiprocess.py'),
                                                        'statsforecast.distributed.multiprocess.MultiprocessBackend.__init__': ( 'distributed.multiprocess.html#multiprocessbackend.__init__',
                                                                                                                                 'statsforecast/distributed/multiprocess.py'),
                                                        'statsforecast.distributed.multiprocess.MultiprocessBackend.cross_validation': ( 'distributed.multiprocess.html#multiprocessbackend.cross_validation',
                                                                                                                                         'statsforecast/distributed/multiprocess.py'),
                                                        'statsforecast.distributed.multiprocess.MultiprocessBackend.forecast': ( 'distributed.multiprocess.html#multiprocessbackend.forecast',
                                                                                                                                 'statsforecast/distributed/multiprocess.py')},
            'statsforecast.distributed.ray': { 'statsforecast.distributed.ray.RayBackend': ( 'distributed.ray.html#raybackend',
                                                                                             'statsforecast/distributed/ray.py'),
                                               'statsforecast.distributed.ray.RayBackend.__init__': ( 'distributed.ray.html#raybackend.__init__',
                                                                                                      'statsforecast/distributed/ray.py'),
                                               'statsforecast.distributed.ray.RayBackend.cross_validation': ( 'distributed.ray.html#raybackend.cross_validation',
                                                                                                              'statsforecast/distributed/ray.py'),
                                               'statsforecast.distributed.ray.RayBackend.forecast': ( 'distributed.ray.html#raybackend.forecast',
                                                                                                      'statsforecast/distributed/ray.py')},
            'statsforecast.distributed.utils': { 'statsforecast.distributed.utils.cross_validation': ( 'distributed.utils.html#cross_validation',
                                                                                                       'statsforecast/distributed/utils.py'),
                                                 'statsforecast.distributed.utils.forecast': ( 'distributed.utils.html#forecast',
                                                                                               'statsforecast/distributed/utils.py')},
            'statsforecast.ets': { 'statsforecast.ets.admissible': ('ets.html#admissible', 'statsforecast/ets.py'),
                                   'statsforecast.ets.check_param': ('ets.html#check_param', 'statsforecast/ets.py'),
                                   'statsforecast.ets.cospi': ('ets.html#cospi', 'statsforecast/ets.py'),
                                   'statsforecast.ets.ets_f': ('ets.html#ets_f', 'statsforecast/ets.py'),
                                   'statsforecast.ets.ets_target_fn': ('ets.html#ets_target_fn', 'statsforecast/ets.py'),
                                   'statsforecast.ets.etscalc': ('ets.html#etscalc', 'statsforecast/ets.py'),
                                   'statsforecast.ets.etsforecast': ('ets.html#etsforecast', 'statsforecast/ets.py'),
                                   'statsforecast.ets.etsmodel': ('ets.html#etsmodel', 'statsforecast/ets.py'),
                                   'statsforecast.ets.etssimulate': ('ets.html#etssimulate', 'statsforecast/ets.py'),
                                   'statsforecast.ets.forecast': ('ets.html#forecast', 'statsforecast/ets.py'),
                                   'statsforecast.ets.forecast_ets': ('ets.html#forecast_ets', 'statsforecast/ets.py'),
                                   'statsforecast.ets.fourier': ('ets.html#fourier', 'statsforecast/ets.py'),
                                   'statsforecast.ets.initparam': ('ets.html#initparam', 'statsforecast/ets.py'),
                                   'statsforecast.ets.initstate': ('ets.html#initstate', 'statsforecast/ets.py'),
                                   'statsforecast.ets.nelder_mead': ('ets.html#nelder_mead', 'statsforecast/ets.py'),
                                   'statsforecast.ets.optimize_ets_target_fn': ('ets.html#optimize_ets_target_fn', 'statsforecast/ets.py'),
                                   'statsforecast.ets.pegelsfcast_C': ('ets.html#pegelsfcast_c', 'statsforecast/ets.py'),
                                   'statsforecast.ets.pegelsresid_C': ('ets.html#pegelsresid_c', 'statsforecast/ets.py'),
                                   'statsforecast.ets.restrict_to_bounds': ('ets.html#restrict_to_bounds', 'statsforecast/ets.py'),
                                   'statsforecast.ets.sinpi': ('ets.html#sinpi', 'statsforecast/ets.py'),
                                   'statsforecast.ets.switch': ('ets.html#switch', 'statsforecast/ets.py'),
                                   'statsforecast.ets.update': ('ets.html#update', 'statsforecast/ets.py')},
            'statsforecast.models': { 'statsforecast.models.ADIDA': ('models.html#adida', 'statsforecast/models.py'),
                                      'statsforecast.models.ADIDA.__init__': ('models.html#adida.__init__', 'statsforecast/models.py'),
                                      'statsforecast.models.ADIDA.__repr__': ('models.html#adida.__repr__', 'statsforecast/models.py'),
                                      'statsforecast.models.ADIDA.fit': ('models.html#adida.fit', 'statsforecast/models.py'),
                                      'statsforecast.models.ADIDA.forecast': ('models.html#adida.forecast', 'statsforecast/models.py'),
                                      'statsforecast.models.ADIDA.predict': ('models.html#adida.predict', 'statsforecast/models.py'),
                                      'statsforecast.models.ADIDA.predict_in_sample': ( 'models.html#adida.predict_in_sample',
                                                                                        'statsforecast/models.py'),
                                      'statsforecast.models.AutoARIMA': ('models.html#autoarima', 'statsforecast/models.py'),
                                      'statsforecast.models.AutoARIMA.__init__': ( 'models.html#autoarima.__init__',
                                                                                   'statsforecast/models.py'),
                                      'statsforecast.models.AutoARIMA.__repr__': ( 'models.html#autoarima.__repr__',
                                                                                   'statsforecast/models.py'),
                                      'statsforecast.models.AutoARIMA.fit': ('models.html#autoarima.fit', 'statsforecast/models.py'),
                                      'statsforecast.models.AutoARIMA.forecast': ( 'models.html#autoarima.forecast',
                                                                                   'statsforecast/models.py'),
                                      'statsforecast.models.AutoARIMA.predict': ( 'models.html#autoarima.predict',
                                                                                  'statsforecast/models.py'),
                                      'statsforecast.models.AutoARIMA.predict_in_sample': ( 'models.html#autoarima.predict_in_sample',
                                                                                            'statsforecast/models.py'),
                                      'statsforecast.models.AutoCES': ('models.html#autoces', 'statsforecast/models.py'),
                                      'statsforecast.models.AutoCES.__init__': ('models.html#autoces.__init__', 'statsforecast/models.py'),
                                      'statsforecast.models.AutoCES.__repr__': ('models.html#autoces.__repr__', 'statsforecast/models.py'),
                                      'statsforecast.models.AutoCES.fit': ('models.html#autoces.fit', 'statsforecast/models.py'),
                                      'statsforecast.models.AutoCES.forecast': ('models.html#autoces.forecast', 'statsforecast/models.py'),
                                      'statsforecast.models.AutoCES.predict': ('models.html#autoces.predict', 'statsforecast/models.py'),
                                      'statsforecast.models.AutoCES.predict_in_sample': ( 'models.html#autoces.predict_in_sample',
                                                                                          'statsforecast/models.py'),
                                      'statsforecast.models.CrostonClassic': ('models.html#crostonclassic', 'statsforecast/models.py'),
                                      'statsforecast.models.CrostonClassic.__init__': ( 'models.html#crostonclassic.__init__',
                                                                                        'statsforecast/models.py'),
                                      'statsforecast.models.CrostonClassic.__repr__': ( 'models.html#crostonclassic.__repr__',
                                                                                        'statsforecast/models.py'),
                                      'statsforecast.models.CrostonClassic.fit': ( 'models.html#crostonclassic.fit',
                                                                                   'statsforecast/models.py'),
                                      'statsforecast.models.CrostonClassic.forecast': ( 'models.html#crostonclassic.forecast',
                                                                                        'statsforecast/models.py'),
                                      'statsforecast.models.CrostonClassic.predict': ( 'models.html#crostonclassic.predict',
                                                                                       'statsforecast/models.py'),
                                      'statsforecast.models.CrostonClassic.predict_in_sample': ( 'models.html#crostonclassic.predict_in_sample',
                                                                                                 'statsforecast/models.py'),
                                      'statsforecast.models.CrostonOptimized': ('models.html#crostonoptimized', 'statsforecast/models.py'),
                                      'statsforecast.models.CrostonOptimized.__init__': ( 'models.html#crostonoptimized.__init__',
                                                                                          'statsforecast/models.py'),
                                      'statsforecast.models.CrostonOptimized.__repr__': ( 'models.html#crostonoptimized.__repr__',
                                                                                          'statsforecast/models.py'),
                                      'statsforecast.models.CrostonOptimized.fit': ( 'models.html#crostonoptimized.fit',
                                                                                     'statsforecast/models.py'),
                                      'statsforecast.models.CrostonOptimized.forecast': ( 'models.html#crostonoptimized.forecast',
                                                                                          'statsforecast/models.py'),
                                      'statsforecast.models.CrostonOptimized.predict': ( 'models.html#crostonoptimized.predict',
                                                                                         'statsforecast/models.py'),
                                      'statsforecast.models.CrostonOptimized.predict_in_sample': ( 'models.html#crostonoptimized.predict_in_sample',
                                                                                                   'statsforecast/models.py'),
                                      'statsforecast.models.CrostonSBA': ('models.html#crostonsba', 'statsforecast/models.py'),
                                      'statsforecast.models.CrostonSBA.__init__': ( 'models.html#crostonsba.__init__',
                                                                                    'statsforecast/models.py'),
                                      'statsforecast.models.CrostonSBA.__repr__': ( 'models.html#crostonsba.__repr__',
                                                                                    'statsforecast/models.py'),
                                      'statsforecast.models.CrostonSBA.fit': ('models.html#crostonsba.fit', 'statsforecast/models.py'),
                                      'statsforecast.models.CrostonSBA.forecast': ( 'models.html#crostonsba.forecast',
                                                                                    'statsforecast/models.py'),
                                      'statsforecast.models.CrostonSBA.predict': ( 'models.html#crostonsba.predict',
                                                                                   'statsforecast/models.py'),
                                      'statsforecast.models.CrostonSBA.predict_in_sample': ( 'models.html#crostonsba.predict_in_sample',
                                                                                             'statsforecast/models.py'),
                                      'statsforecast.models.ETS': ('models.html#ets', 'statsforecast/models.py'),
                                      'statsforecast.models.ETS.__init__': ('models.html#ets.__init__', 'statsforecast/models.py'),
                                      'statsforecast.models.ETS.__repr__': ('models.html#ets.__repr__', 'statsforecast/models.py'),
                                      'statsforecast.models.ETS.fit': ('models.html#ets.fit', 'statsforecast/models.py'),
                                      'statsforecast.models.ETS.forecast': ('models.html#ets.forecast', 'statsforecast/models.py'),
                                      'statsforecast.models.ETS.predict': ('models.html#ets.predict', 'statsforecast/models.py'),
                                      'statsforecast.models.ETS.predict_in_sample': ( 'models.html#ets.predict_in_sample',
                                                                                      'statsforecast/models.py'),
                                      'statsforecast.models.HistoricAverage': ('models.html#historicaverage', 'statsforecast/models.py'),
                                      'statsforecast.models.HistoricAverage.__init__': ( 'models.html#historicaverage.__init__',
                                                                                         'statsforecast/models.py'),
                                      'statsforecast.models.HistoricAverage.__repr__': ( 'models.html#historicaverage.__repr__',
                                                                                         'statsforecast/models.py'),
                                      'statsforecast.models.HistoricAverage.fit': ( 'models.html#historicaverage.fit',
                                                                                    'statsforecast/models.py'),
                                      'statsforecast.models.HistoricAverage.forecast': ( 'models.html#historicaverage.forecast',
                                                                                         'statsforecast/models.py'),
                                      'statsforecast.models.HistoricAverage.predict': ( 'models.html#historicaverage.predict',
                                                                                        'statsforecast/models.py'),
                                      'statsforecast.models.HistoricAverage.predict_in_sample': ( 'models.html#historicaverage.predict_in_sample',
                                                                                                  'statsforecast/models.py'),
                                      'statsforecast.models.Holt': ('models.html#holt', 'statsforecast/models.py'),
                                      'statsforecast.models.Holt.__init__': ('models.html#holt.__init__', 'statsforecast/models.py'),
                                      'statsforecast.models.Holt.__rep__': ('models.html#holt.__rep__', 'statsforecast/models.py'),
                                      'statsforecast.models.HoltWinters': ('models.html#holtwinters', 'statsforecast/models.py'),
                                      'statsforecast.models.HoltWinters.__init__': ( 'models.html#holtwinters.__init__',
                                                                                     'statsforecast/models.py'),
                                      'statsforecast.models.HoltWinters.__rep__': ( 'models.html#holtwinters.__rep__',
                                                                                    'statsforecast/models.py'),
                                      'statsforecast.models.IMAPA': ('models.html#imapa', 'statsforecast/models.py'),
                                      'statsforecast.models.IMAPA.__init__': ('models.html#imapa.__init__', 'statsforecast/models.py'),
                                      'statsforecast.models.IMAPA.__repr__': ('models.html#imapa.__repr__', 'statsforecast/models.py'),
                                      'statsforecast.models.IMAPA.fit': ('models.html#imapa.fit', 'statsforecast/models.py'),
                                      'statsforecast.models.IMAPA.forecast': ('models.html#imapa.forecast', 'statsforecast/models.py'),
                                      'statsforecast.models.IMAPA.predict': ('models.html#imapa.predict', 'statsforecast/models.py'),
                                      'statsforecast.models.IMAPA.predict_in_sample': ( 'models.html#imapa.predict_in_sample',
                                                                                        'statsforecast/models.py'),
                                      'statsforecast.models.Naive': ('models.html#naive', 'statsforecast/models.py'),
                                      'statsforecast.models.Naive.__init__': ('models.html#naive.__init__', 'statsforecast/models.py'),
                                      'statsforecast.models.Naive.__repr__': ('models.html#naive.__repr__', 'statsforecast/models.py'),
                                      'statsforecast.models.Naive.fit': ('models.html#naive.fit', 'statsforecast/models.py'),
                                      'statsforecast.models.Naive.forecast': ('models.html#naive.forecast', 'statsforecast/models.py'),
                                      'statsforecast.models.Naive.predict': ('models.html#naive.predict', 'statsforecast/models.py'),
                                      'statsforecast.models.Naive.predict_in_sample': ( 'models.html#naive.predict_in_sample',
                                                                                        'statsforecast/models.py'),
                                      'statsforecast.models.RandomWalkWithDrift': ( 'models.html#randomwalkwithdrift',
                                                                                    'statsforecast/models.py'),
                                      'statsforecast.models.RandomWalkWithDrift.__init__': ( 'models.html#randomwalkwithdrift.__init__',
                                                                                             'statsforecast/models.py'),
                                      'statsforecast.models.RandomWalkWithDrift.__repr__': ( 'models.html#randomwalkwithdrift.__repr__',
                                                                                             'statsforecast/models.py'),
                                      'statsforecast.models.RandomWalkWithDrift.fit': ( 'models.html#randomwalkwithdrift.fit',
                                                                                        'statsforecast/models.py'),
                                      'statsforecast.models.RandomWalkWithDrift.forecast': ( 'models.html#randomwalkwithdrift.forecast',
                                                                                             'statsforecast/models.py'),
                                      'statsforecast.models.RandomWalkWithDrift.predict': ( 'models.html#randomwalkwithdrift.predict',
                                                                                            'statsforecast/models.py'),
                                      'statsforecast.models.RandomWalkWithDrift.predict_in_sample': ( 'models.html#randomwalkwithdrift.predict_in_sample',
                                                                                                      'statsforecast/models.py'),
                                      'statsforecast.models.SeasonalExponentialSmoothing': ( 'models.html#seasonalexponentialsmoothing',
                                                                                             'statsforecast/models.py'),
                                      'statsforecast.models.SeasonalExponentialSmoothing.__init__': ( 'models.html#seasonalexponentialsmoothing.__init__',
                                                                                                      'statsforecast/models.py'),
                                      'statsforecast.models.SeasonalExponentialSmoothing.__repr__': ( 'models.html#seasonalexponentialsmoothing.__repr__',
                                                                                                      'statsforecast/models.py'),
                                      'statsforecast.models.SeasonalExponentialSmoothing.fit': ( 'models.html#seasonalexponentialsmoothing.fit',
                                                                                                 'statsforecast/models.py'),
                                      'statsforecast.models.SeasonalExponentialSmoothing.forecast': ( 'models.html#seasonalexponentialsmoothing.forecast',
                                                                                                      'statsforecast/models.py'),
                                      'statsforecast.models.SeasonalExponentialSmoothing.predict': ( 'models.html#seasonalexponentialsmoothing.predict',
                                                                                                     'statsforecast/models.py'),
                                      'statsforecast.models.SeasonalExponentialSmoothing.predict_in_sample': ( 'models.html#seasonalexponentialsmoothing.predict_in_sample',
                                                                                                               'statsforecast/models.py'),
                                      'statsforecast.models.SeasonalExponentialSmoothingOptimized': ( 'models.html#seasonalexponentialsmoothingoptimized',
                                                                                                      'statsforecast/models.py'),
                                      'statsforecast.models.SeasonalExponentialSmoothingOptimized.__init__': ( 'models.html#seasonalexponentialsmoothingoptimized.__init__',
                                                                                                               'statsforecast/models.py'),
                                      'statsforecast.models.SeasonalExponentialSmoothingOptimized.__repr__': ( 'models.html#seasonalexponentialsmoothingoptimized.__repr__',
                                                                                                               'statsforecast/models.py'),
                                      'statsforecast.models.SeasonalExponentialSmoothingOptimized.fit': ( 'models.html#seasonalexponentialsmoothingoptimized.fit',
                                                                                                          'statsforecast/models.py'),
                                      'statsforecast.models.SeasonalExponentialSmoothingOptimized.forecast': ( 'models.html#seasonalexponentialsmoothingoptimized.forecast',
                                                                                                               'statsforecast/models.py'),
                                      'statsforecast.models.SeasonalExponentialSmoothingOptimized.predict': ( 'models.html#seasonalexponentialsmoothingoptimized.predict',
                                                                                                              'statsforecast/models.py'),
                                      'statsforecast.models.SeasonalExponentialSmoothingOptimized.predict_in_sample': ( 'models.html#seasonalexponentialsmoothingoptimized.predict_in_sample',
                                                                                                                        'statsforecast/models.py'),
                                      'statsforecast.models.SeasonalNaive': ('models.html#seasonalnaive', 'statsforecast/models.py'),
                                      'statsforecast.models.SeasonalNaive.__init__': ( 'models.html#seasonalnaive.__init__',
                                                                                       'statsforecast/models.py'),
                                      'statsforecast.models.SeasonalNaive.__repr__': ( 'models.html#seasonalnaive.__repr__',
                                                                                       'statsforecast/models.py'),
                                      'statsforecast.models.SeasonalNaive.fit': ( 'models.html#seasonalnaive.fit',
                                                                                  'statsforecast/models.py'),
                                      'statsforecast.models.SeasonalNaive.forecast': ( 'models.html#seasonalnaive.forecast',
                                                                                       'statsforecast/models.py'),
                                      'statsforecast.models.SeasonalNaive.predict': ( 'models.html#seasonalnaive.predict',
                                                                                      'statsforecast/models.py'),
                                      'statsforecast.models.SeasonalNaive.predict_in_sample': ( 'models.html#seasonalnaive.predict_in_sample',
                                                                                                'statsforecast/models.py'),
                                      'statsforecast.models.SeasonalWindowAverage': ( 'models.html#seasonalwindowaverage',
                                                                                      'statsforecast/models.py'),
                                      'statsforecast.models.SeasonalWindowAverage.__init__': ( 'models.html#seasonalwindowaverage.__init__',
                                                                                               'statsforecast/models.py'),
                                      'statsforecast.models.SeasonalWindowAverage.__repr__': ( 'models.html#seasonalwindowaverage.__repr__',
                                                                                               'statsforecast/models.py'),
                                      'statsforecast.models.SeasonalWindowAverage.fit': ( 'models.html#seasonalwindowaverage.fit',
                                                                                          'statsforecast/models.py'),
                                      'statsforecast.models.SeasonalWindowAverage.forecast': ( 'models.html#seasonalwindowaverage.forecast',
                                                                                               'statsforecast/models.py'),
                                      'statsforecast.models.SeasonalWindowAverage.predict': ( 'models.html#seasonalwindowaverage.predict',
                                                                                              'statsforecast/models.py'),
                                      'statsforecast.models.SeasonalWindowAverage.predict_in_sample': ( 'models.html#seasonalwindowaverage.predict_in_sample',
                                                                                                        'statsforecast/models.py'),
                                      'statsforecast.models.SimpleExponentialSmoothing': ( 'models.html#simpleexponentialsmoothing',
                                                                                           'statsforecast/models.py'),
                                      'statsforecast.models.SimpleExponentialSmoothing.__init__': ( 'models.html#simpleexponentialsmoothing.__init__',
                                                                                                    'statsforecast/models.py'),
                                      'statsforecast.models.SimpleExponentialSmoothing.__repr__': ( 'models.html#simpleexponentialsmoothing.__repr__',
                                                                                                    'statsforecast/models.py'),
                                      'statsforecast.models.SimpleExponentialSmoothing.fit': ( 'models.html#simpleexponentialsmoothing.fit',
                                                                                               'statsforecast/models.py'),
                                      'statsforecast.models.SimpleExponentialSmoothing.forecast': ( 'models.html#simpleexponentialsmoothing.forecast',
                                                                                                    'statsforecast/models.py'),
                                      'statsforecast.models.SimpleExponentialSmoothing.predict': ( 'models.html#simpleexponentialsmoothing.predict',
                                                                                                   'statsforecast/models.py'),
                                      'statsforecast.models.SimpleExponentialSmoothing.predict_in_sample': ( 'models.html#simpleexponentialsmoothing.predict_in_sample',
                                                                                                             'statsforecast/models.py'),
                                      'statsforecast.models.SimpleExponentialSmoothingOptimized': ( 'models.html#simpleexponentialsmoothingoptimized',
                                                                                                    'statsforecast/models.py'),
                                      'statsforecast.models.SimpleExponentialSmoothingOptimized.__init__': ( 'models.html#simpleexponentialsmoothingoptimized.__init__',
                                                                                                             'statsforecast/models.py'),
                                      'statsforecast.models.SimpleExponentialSmoothingOptimized.__repr__': ( 'models.html#simpleexponentialsmoothingoptimized.__repr__',
                                                                                                             'statsforecast/models.py'),
                                      'statsforecast.models.SimpleExponentialSmoothingOptimized.fit': ( 'models.html#simpleexponentialsmoothingoptimized.fit',
                                                                                                        'statsforecast/models.py'),
                                      'statsforecast.models.SimpleExponentialSmoothingOptimized.forecast': ( 'models.html#simpleexponentialsmoothingoptimized.forecast',
                                                                                                             'statsforecast/models.py'),
                                      'statsforecast.models.SimpleExponentialSmoothingOptimized.predict': ( 'models.html#simpleexponentialsmoothingoptimized.predict',
                                                                                                            'statsforecast/models.py'),
                                      'statsforecast.models.SimpleExponentialSmoothingOptimized.predict_in_sample': ( 'models.html#simpleexponentialsmoothingoptimized.predict_in_sample',
                                                                                                                      'statsforecast/models.py'),
                                      'statsforecast.models.TSB': ('models.html#tsb', 'statsforecast/models.py'),
                                      'statsforecast.models.TSB.__init__': ('models.html#tsb.__init__', 'statsforecast/models.py'),
                                      'statsforecast.models.TSB.__repr__': ('models.html#tsb.__repr__', 'statsforecast/models.py'),
                                      'statsforecast.models.TSB.fit': ('models.html#tsb.fit', 'statsforecast/models.py'),
                                      'statsforecast.models.TSB.forecast': ('models.html#tsb.forecast', 'statsforecast/models.py'),
                                      'statsforecast.models.TSB.predict': ('models.html#tsb.predict', 'statsforecast/models.py'),
                                      'statsforecast.models.TSB.predict_in_sample': ( 'models.html#tsb.predict_in_sample',
                                                                                      'statsforecast/models.py'),
                                      'statsforecast.models.WindowAverage': ('models.html#windowaverage', 'statsforecast/models.py'),
                                      'statsforecast.models.WindowAverage.__init__': ( 'models.html#windowaverage.__init__',
                                                                                       'statsforecast/models.py'),
                                      'statsforecast.models.WindowAverage.__repr__': ( 'models.html#windowaverage.__repr__',
                                                                                       'statsforecast/models.py'),
                                      'statsforecast.models.WindowAverage.fit': ( 'models.html#windowaverage.fit',
                                                                                  'statsforecast/models.py'),
                                      'statsforecast.models.WindowAverage.forecast': ( 'models.html#windowaverage.forecast',
                                                                                       'statsforecast/models.py'),
                                      'statsforecast.models.WindowAverage.predict': ( 'models.html#windowaverage.predict',
                                                                                      'statsforecast/models.py'),
                                      'statsforecast.models.WindowAverage.predict_in_sample': ( 'models.html#windowaverage.predict_in_sample',
                                                                                                'statsforecast/models.py'),
                                      'statsforecast.models._TS': ('models.html#_ts', 'statsforecast/models.py'),
                                      'statsforecast.models._TS.new': ('models.html#_ts.new', 'statsforecast/models.py'),
                                      'statsforecast.models._adida': ('models.html#_adida', 'statsforecast/models.py'),
                                      'statsforecast.models._calculate_intervals': ( 'models.html#_calculate_intervals',
                                                                                     'statsforecast/models.py'),
                                      'statsforecast.models._calculate_sigma': ('models.html#_calculate_sigma', 'statsforecast/models.py'),
                                      'statsforecast.models._chunk_sums': ('models.html#_chunk_sums', 'statsforecast/models.py'),
                                      'statsforecast.models._croston_classic': ('models.html#_croston_classic', 'statsforecast/models.py'),
                                      'statsforecast.models._croston_optimized': ( 'models.html#_croston_optimized',
                                                                                   'statsforecast/models.py'),
                                      'statsforecast.models._croston_sba': ('models.html#_croston_sba', 'statsforecast/models.py'),
                                      'statsforecast.models._demand': ('models.html#_demand', 'statsforecast/models.py'),
                                      'statsforecast.models._historic_average': ( 'models.html#_historic_average',
                                                                                  'statsforecast/models.py'),
                                      'statsforecast.models._imapa': ('models.html#_imapa', 'statsforecast/models.py'),
                                      'statsforecast.models._intervals': ('models.html#_intervals', 'statsforecast/models.py'),
                                      'statsforecast.models._naive': ('models.html#_naive', 'statsforecast/models.py'),
                                      'statsforecast.models._optimized_ses_forecast': ( 'models.html#_optimized_ses_forecast',
                                                                                        'statsforecast/models.py'),
                                      'statsforecast.models._probability': ('models.html#_probability', 'statsforecast/models.py'),
                                      'statsforecast.models._quantiles': ('models.html#_quantiles', 'statsforecast/models.py'),
                                      'statsforecast.models._random_walk_with_drift': ( 'models.html#_random_walk_with_drift',
                                                                                        'statsforecast/models.py'),
                                      'statsforecast.models._repeat_val': ('models.html#_repeat_val', 'statsforecast/models.py'),
                                      'statsforecast.models._repeat_val_seas': ('models.html#_repeat_val_seas', 'statsforecast/models.py'),
                                      'statsforecast.models._seasonal_exponential_smoothing': ( 'models.html#_seasonal_exponential_smoothing',
                                                                                                'statsforecast/models.py'),
                                      'statsforecast.models._seasonal_naive': ('models.html#_seasonal_naive', 'statsforecast/models.py'),
                                      'statsforecast.models._seasonal_ses_optimized': ( 'models.html#_seasonal_ses_optimized',
                                                                                        'statsforecast/models.py'),
                                      'statsforecast.models._seasonal_window_average': ( 'models.html#_seasonal_window_average',
                                                                                         'statsforecast/models.py'),
                                      'statsforecast.models._ses': ('models.html#_ses', 'statsforecast/models.py'),
                                      'statsforecast.models._ses_fcst_mse': ('models.html#_ses_fcst_mse', 'statsforecast/models.py'),
                                      'statsforecast.models._ses_forecast': ('models.html#_ses_forecast', 'statsforecast/models.py'),
                                      'statsforecast.models._ses_mse': ('models.html#_ses_mse', 'statsforecast/models.py'),
                                      'statsforecast.models._ses_optimized': ('models.html#_ses_optimized', 'statsforecast/models.py'),
                                      'statsforecast.models._tsb': ('models.html#_tsb', 'statsforecast/models.py'),
                                      'statsforecast.models._window_average': ('models.html#_window_average', 'statsforecast/models.py')},
            'statsforecast.utils': {'statsforecast.utils.generate_series': ('utils.html#generate_series', 'statsforecast/utils.py')}}}